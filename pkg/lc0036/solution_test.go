package lc0036

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test_isValidSudoku(t *testing.T) {
	t.Parallel()
	type args struct {
		board [][]byte
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: `test_001`,
			args: args{
				board: [][]byte{
					{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
					{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
					{'.', '9', '8', '.', '.', '.', '.', '6', '.'},

					{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
					{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
					{'7', '.', '.', '.', '2', '.', '.', '.', '6'},

					{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
					{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
					{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
				},
			},
			want: true,
		},
		{
			name: `test_002`,
			args: args{
				board: [][]byte{
					{'.', '.', '.', '.', '.', '.', '.', '.', '2'},
					{'.', '.', '.', '.', '.', '.', '6', '.', '.'},
					{'.', '.', '1', '4', '.', '.', '8', '.', '.'},

					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '3', '.', '.', '.', '.'},

					{'5', '.', '8', '6', '.', '.', '.', '.', '.'},
					{'.', '9', '.', '.', '.', '.', '4', '.', '.'},
					{'.', '.', '.', '.', '5', '.', '.', '.', '.'},
				},
			},
			want: true,
		},
		{
			name: `test_003`,
			args: args{
				board: [][]byte{
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '3', '.', '.', '5', '.', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},

					{'.', '.', '.', '8', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '1', '1', '6', '.', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},

					{'.', '.', '.', '.', '.', '.', '1', '.', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '7'},
					{'.', '.', '.', '.', '.', '.', '.', '4', '.'},
				},
			},
			want: false,
		},
		{
			name: `test_004`,
			args: args{
				board: [][]byte{
					{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
					{'.', '4', '.', '3', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '.', '3', '.', '.', '1'},

					{'8', '.', '.', '.', '.', '.', '.', '2', '.'},
					{'.', '.', '2', '.', '7', '.', '.', '.', '.'},
					{'.', '1', '5', '.', '.', '.', '.', '.', '.'},

					{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
					{'.', '2', '.', '9', '.', '.', '.', '.', '.'},
					{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
				},
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.want, isValidSudoku(tt.args.board))
		})
	}
}
